pipeline {
    agent any
    
    environment {
        ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
        ANSIBLE_HOST_KEY_CHECKING = 'False'
    }

parameters {
      string(name: 'inventory', defaultValue: 'dev',  description: 'This is the inventory file for the environment to deploy configuration')
    }
    
    stages {
        stage('Initial cleanup') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout SCM') {
            steps {
                git branch: 'main', url: 'https://github.com/alagbaski/ansible-config-mgt.git'
            }
        }

        stage('Prepare Ansible For Execution') {
            steps {
                sh 'echo ${WORKSPACE}'
                sh 'sed -i "3 a roles_path=${WORKSPACE}/roles" ${WORKSPACE}/deploy/ansible.cfg'
            }
        }

        stage('Test SSH Connections') {
            steps {
                script {
                    def hosts = [
                        [group: 'tooling', ip: '172.31.37.54', user: 'ec2-user'],
                        [group: 'tooling', ip: '172.31.46.42', user: 'ec2-user'],
                        [group: 'nginx', ip: '172.31.35.181', user: 'ubuntu'],
                        [group: 'db', ip: '172.31.45.199', user: 'ubuntu']
                    ]
                    for (host in hosts) {
                        sshagent(['private-key']) {
                            sh "ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/key.pem ${host.user}@${host.ip} exit"
                        }
                    }
                }
            }
        }

        stage('Run Ansible playbook') {
            steps {
                sshagent(['private-key']) {
                    ansiblePlaybook(
                        become: true,
                        credentialsId: 'private-key',
                        disableHostKeyChecking: true,
                        installation: 'ansible',
                        inventory: "${WORKSPACE}/${inventory}",
                        playbook: "${WORKSPACE}/playbooks/site.yml"
                    )
                }
            }
        }

        stage('Clean Workspace after build') {
            steps {
                cleanWs(
                    cleanWhenAborted: true, 
                    cleanWhenFailure: true, 
                    cleanWhenNotBuilt: true, 
                    cleanWhenUnstable: true, 
                    deleteDirs: true
                )
            }
        }
    }
}
